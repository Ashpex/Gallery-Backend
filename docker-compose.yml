version: '3.7'

services:
  db:
    container_name: "gallery-db"
    platform: linux/x86_64
    build:
      context: .
      dockerfile: db.Dockerfile
    networks:
      - default
    restart: always
    ports:
      # <Port exposed> : < MySQL Port running inside container>
      - "3306:3306"
    # setting some env vars to create the DB
    environment:
      MYSQL_ROOT_PASSWORD: "123456"
      MYSQL_DATABASE: "user"
      # OR if you want to use "root" as the user, just these two lines
      # MYSQL_ROOT_PASSWORD: ${DATABASE_PASSWORD}
      # MYSQL_DATABASE: ${DATABASE_NAME}

    # we mount a data volume to make sure we don't lose data
    volumes:
      - mysql_data:/var/lib/mysql
    command: --default-authentication-plugin=mysql_native_password
  api:
    container_name:  "gallery-api"
    # we want to use the image which is build from our Dockerfile
    build:
      context: .
      dockerfile: api.Dockerfile
    ports:
      - "8080:8080"
    environment:
      DB_USER: root
      DB_PASS: 123456
      DB_HOST: host.docker.internal
      DB_PORT: 3306
      DB_NAME: user
      JWT_SECRET: ashpex
    # we are depending on the mysql backend
    depends_on:
      - db
    # We mount the working dir into the container, handy for development
    # This is what makes the hot reloading work inside a Docker container
    volumes:
      - .:/app/
  nginx:
    container_name: "nginx"
    image: nginx
    build:
      context: .
      dockerfile: nginx.Dockerfile
    #volumes:
    #  - .:/etc/nginx/conf.d/
    ports:
      - "80:80"
    depends_on:
      - api
    restart: always
    networks:
      - default
    command: ["/usr/sbin/nginx", "-g", "daemon off;"]

networks:
  default:
volumes:
  mysql_data: